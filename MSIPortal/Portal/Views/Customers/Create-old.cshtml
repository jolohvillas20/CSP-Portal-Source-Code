@model Portal.Models.Customers

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row bg-title">
    <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">
        <h4 class="page-title">Customers</h4>
    </div>
    <!-- /.col-lg-12 -->
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-inverse">
                <div class="panel-heading"> Create</div>
                <div class="panel-wrapper collapse in" aria-expanded="true">
                    <div class="panel-body">
                        <div class="form">

                            <h3 class="box-title m-b-0">Company</h3>
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.CompanyName) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.DomainName) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.DomainName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DomainName, "", new { @class = "text-danger" })
                                    <span id="errMsg" class="text-danger"></span>
                                    <div id="divRequest" style="display:none;">
                                        @*<input type="button" id="requestRel" class="requestRel" value="Request reseller relationship" />*@
                                    </div>
                                    <div id="divAvail" style="display:none;"><i class="fa fa-check"></i> available</div>
                                    <div id="divChecking" style="display:none;"><i class="fa fa-spinner"></i> checking domain...</div>

                                </div>
                                <div class="col-2 no-padding">
                                    <p class="form-control-static">.onmicrosoft.com</p>
                                </div>
                            </div>



                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.AddressLine1) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.AddressLine1, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.AddressLine1, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.AddressLine2)</label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.AddressLine2, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.AddressLine2, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.City) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.State)</label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.ZipPostal)</label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.ZipPostal, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ZipPostal, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.SpecialQualificationsID, htmlAttributes: new { @class = "control-label col-md-2" })</label>
                                <div class="col-5">
                                    @Html.DropDownList("SpecialQualificationsID", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SpecialQualificationsID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <h3 class="box-title m-b-0">Primary Contact</h3>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.FirstName) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.LastName) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.EmailAddress) <span>*</span></label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.PhoneNumber)</label>
                                <div class="col-5">
                                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <h3 class="box-title m-b-0">Indirect reseller info</h3>

                            <div class="form-group row">
                                <label class="col-2 col-form-label">@Html.LabelFor(model => model.IndirectResellerID)</label>
                                <div class="col-5">
                                    @Html.DropDownList("IndirectResellerID", null, "Select indirect reseller", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IndirectResellerID, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group row">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-default" id="btnCreate" />
                                    <input type="button" value="Next: Subscription" class="btn btn-default" />

                                </div>
                            </div>

                            <div>
                                <div>
                                    @{
                                        Html.RenderPartial("_Subscriptions");
                                    }
                                </div>   
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    if ($('#DomainName').val() != "")
    {
        CheckDomain();
    }


    $('#DomainName').keypress(function (e) {

        $("#errMsg").text("");

        var regex = new RegExp("^[a-zA-Z0-9]+$");
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        if (regex.test(str)) {

            return true;
        }

        e.preventDefault();
        $("#errMsg").text("Domain names can only contain letters and numbers; no hyphens, periods, or underscores.");

        return false;
    });
   
    //CHECK DOMAIN AVAILABILITY
    $('#DomainName').change(function (e) {

        CheckDomain();
      
    });


    function CheckDomain()
    {
        var name = $('#DomainName').val();

        if (name == '') {
            //$(".preload").hide();
            $("#divChecking").attr("style", "display:none;");
            $("#errMsg").text("");
            $("#divRequest").attr("style", "display:none;");
            $("#divAvail").attr("style", "display:none;");

            return;
        }

        $("#divChecking").attr("style", "display:block;");
        $("#errMsg").text("");
        $("#divRequest").attr("style", "display:none;");
        $("#divAvail").attr("style", "display:none;");





        //CHECK FOR DOMAIN
        $.ajax({
            url: '/Customers/CheckDomain',
            data: { domainName: name },
            contentType: 'application/html ; charset:utf-8',
            type: 'GET',
            dataType: 'html'
        }).success(function (data) {
            var data1 = $.parseJSON(data);
            $("#divChecking").attr("style", "display:none;");

            //alert(data1);
            if (data1 == "false") {
                $("#errMsg").text(name + " .onmicrosoft.com is not available.");
                $("#divRequest").attr("style", "display:block;");
                $("#divAvail").attr("style", "display:none;");

            }
            else {
                $("#errMsg").text("");
                $("#divRequest").attr("style", "display:none;");
                $("#divAvail").attr("style", "display:block;");
            }

            //$("#ShippingDetails_WeightCharge").prop("value", data1);
            //$("#txtWeightCharge").prop("value", data1);
            //$(".preload").hide();

        }).error(function () {
            //$(".preload").hide();
            $("#divChecking").attr("style", "display:none;");
            $("#errMsg").text("error in checking domain.");
            $("#divRequest").attr("style", "display:none;");
            $("#divAvail").attr("style", "display:none;");
        });
        //END CHECK FOR DOMAIN

    }

    $('.requestRel').click(function (e)
    {
        e.preventDefault();
        //alert('test');

        $('body').css('overflow', 'hidden');
        $('#divAddItem').attr("data-toggle", "modal");
        $('#divAddItem').attr("data-target", "#modal-apply");
    });




</script>




<script>

    $(document).ready(function () {

        //sidebar highlight
        $('#side-menu li:nth-child(4) a').addClass("active");

    });

</script>
